---
- name: Ensure minimal Ansible capability on host.
  hosts: all
  gather_facts: false
  become: true
  tags:
    - setup

  vars:
    ap_python_test_path: "/usr/bin/python"
    ap_python_install_pkg: "python-minimal"

  tasks:
    - name: Ensure the server can run Ansible tasks.
      block:
        - name: Check for Python on the server.
          raw: "test -e {{ ap_python_test_path }}"
          register: python_exists
          changed_when: false
          failed_when: false

        - name: Install Python on the server.
          raw: "apt -y update && apt install -y {{ ap_python_install_pkg }}"
          register: python_installed
          when:
            - "python_exists.rc != 0"
          changed_when:
            - "'0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.' not in python_installed.stdout"

# Adapted from https://blog.ssdnodes.com/blog/installing-nextcloud-docker/
- name: Set up containers on host.
  hosts: all
  gather_facts: true
  become: true
  tags:
    - docker

  vars:
    pip_install_packages:
      - name: "docker"
      - name: "docker-compose"

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  tasks:
    - name: Ensure we have a network for containers to share.
      docker_network:
        name: "nextcloud_network"

    - name: Ensure required volumes are present.
      docker_volume:
        name: "{{ volume }}"
      loop:
        - "nextcloud"
        - "db"
      loop_control:
        loop_var: volume

    - name: Ensure the Nginx proxy container is present.
      docker_container:
        name: "nextcloud-proxy"
        image: "jwilder/nginx-proxy:alpine"
        labels:
          com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
        networks:
          - name: "nextcloud_network"
        ports:
         - "80:80"
         - "443:443"
        restart: true
        state: started
        volumes:
          - "./proxy/conf.d:/etc/nginx/conf.d:rw"
          - "./proxy/vhost.d:/etc/nginx/vhost.d:rw"
          - "./proxy/html:/usr/share/nginx/html:rw"
          - "./proxy/certs:/etc/nginx/certs:ro"
          - "/etc/localtime:/etc/localtime:ro"
          - "/var/run/docker.sock:/tmp/docker.sock:ro"

    - name: Ensure the Mariadb container is present.
      docker_container:
        name: "nextcloud-mariadb"
        domainname: "db"
        image: "mariadb"
        networks:
          - name: "nextcloud_network"
        volumes:
          - "db:/var/lib/mysql"
          - "/etc/localtime:/etc/localtime:ro"
        env:
          MYSQL_ROOT_PASSWORD: "root"
          MYSQL_PASSWORD: "mysql"
          MYSQL_DATABASE: "nextcloud"
          MYSQL_USER: "nextcloud"
        restart: true
        state: started

    - name: Ensure the Nextcloud container is present.
      docker_container:
        name: "nextcloud-app"
        image: "nextcloud:latest"
        networks:
          - name: "nextcloud_network"
        volumes:
          - "nextcloud:/var/www/html"
          - "./app/config:/var/www/html/config"
          - "./app/custom_apps:/var/www/html/custom_apps"
          - "./app/data:/var/www/html/data"
          - "./app/themes:/var/www/html/themes"
          - "/etc/localtime:/etc/localtime:ro"
        env:
          VIRTUAL_HOST: "tibiacarpet.local"
        restart: true
        state: started
